{"ast":null,"code":"var _jsxFileName = \"/Users/Sasha/Desktop/School/react/e-commerce1/src/contexts/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  //find if cartItems contains product to Add\n  const existingCartItem = cartItems.find(cartItems => cartItems.id === productToAdd.id); //if found increment quantity\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  } //return new array with modified cartITems\n\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {}\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"X7m0wQJ+zlrOgjCUh5u2IGGBLdE=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/Sasha/Desktop/School/react/e-commerce1/src/contexts/cart.context.jsx"],"names":["createContext","useState","addCartItem","cartItems","productToAdd","existingCartItem","find","id","map","cartItem","quantity","CartContext","isCartOpen","setIsCartOpen","addItemToCart","CartProvider","children","setCartItems","value"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,YAAZ,KAA6B;AAC7C;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAgBH,SAAD,IAAeA,SAAS,CAACI,EAAV,KAAiBH,YAAY,CAACG,EAA5D,CAAzB,CAF6C,CAG7C;;AACA,MAAIF,gBAAJ,EAAsB;AAClB,WAAOF,SAAS,CAACK,GAAV,CAAeC,QAAD,IAAcA,QAAQ,CAACF,EAAT,KAAgBH,YAAY,CAACG,EAA7B,GACnC,EAAC,GAAGE,QAAJ;AAAcC,MAAAA,QAAQ,EAAED,QAAQ,CAACC,QAAT,GAAoB;AAA5C,KADmC,GAE7BD,QAFC,CAAP;AAIH,GAT4C,CAU7C;;;AACA,SAAO,CAAC,GAAGN,SAAJ,EAAe,EAAE,GAAGC,YAAL;AAAmBM,IAAAA,QAAQ,EAAC;AAA5B,GAAf,CAAP;AACH,CAZD;;AAcA,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAAC;AACrCY,EAAAA,UAAU,EAAE,KADyB;AAErCC,EAAAA,aAAa,EAAE,MAAM,CAAE,CAFc;AAGrCV,EAAAA,SAAS,EAAE,EAH0B;AAIrCW,EAAAA,aAAa,EAAE,MAAM,CAAE;AAJc,CAAD,CAAjC;AAOP,OAAO,MAAMC,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC,QAAM,CAACJ,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACE,SAAD,EAAYc,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMa,aAAa,GAAIV,YAAD,IAAkB;AACpCa,IAAAA,YAAY,CAACf,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAZ,CAAZ;AACH,GAFD;;AAGA,QAAMc,KAAK,GAAG;AAAEN,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA,aAA7B;AAA4CX,IAAAA;AAA5C,GAAd;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEe,KAA7B;AAAA,cAAqCF;AAArC;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAXM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState } from \"react\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n    //find if cartItems contains product to Add\n    const existingCartItem = cartItems.find((cartItems) => cartItems.id === productToAdd.id);\n    //if found increment quantity\n    if (existingCartItem) {\n        return cartItems.map((cartItem) => cartItem.id === productToAdd.id ?\n        {...cartItem, quantity: cartItem.quantity + 1}\n            : cartItem\n        );\n    }\n    //return new array with modified cartITems\n    return [...cartItems, { ...productToAdd, quantity:1 }];\n}\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {}\n})\n\nexport const CartProvider = ({children}) => {\n    const [isCartOpen, setIsCartOpen] = useState(false);\n    const [cartItems, setCartItems] = useState([]);\n\n    const addItemToCart = (productToAdd) => {\n        setCartItems(addCartItem(cartItems, productToAdd));\n    }\n    const value = { isCartOpen, setIsCartOpen, addItemToCart, cartItems};\n    return(\n        <CartContext.Provider value={value}>{children}</CartContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}